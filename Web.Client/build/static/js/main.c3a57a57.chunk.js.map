{"version":3,"sources":["Images/logo.png","Components/Common/Link.js","Components/Common/NavBar.js","Components/Common/Footer.js","Views/Homepage.js","Components/Common/InputField.js","Components/Common/Button.js","Components/LoginForm.js","Components/RegisterForm.js","Views/AuthPage.js","Configs/Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Link","props","to","link","activeClassName","className","isButton","name","NavBar","src","require","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","Footer","Homepage","InputField","class","symbol","placeholder","Button","onClick","onSubmit","role","value","LoginForm","this","handleFormSubmit","RegisterForm","AuthPage","state","isLoginActive","isRegisterActive","handleShowLoginForm","bind","handleShowRegisterForm","setState","loginFormActive","registerFormActive","Routes","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLAAAA,EAAOC,QAAU,IAA0B,kC,qICS5BC,EANF,SAACC,GAAD,OACX,kBAAC,IAAD,CAASC,GAAID,EAAME,KAAMC,gBAAgB,SAASC,UAAS,mBAAcJ,EAAMK,WAC5EL,EAAMM,OCDUC,E,iLAEjB,OACE,yBAAKH,UAAU,wCACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAASH,GAAG,KACV,yBAAKO,IAAKC,EAAQ,IAA0BL,UAAU,OAAOM,IAAI,oBAEnE,4BAAQN,UAAU,iBAAiBO,KAAK,SAASC,cAAY,WAAWC,cAAY,cAAcC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAC5J,0BAAMZ,UAAU,yBAElB,yBAAKA,UAAU,+CAA+Ca,GAAG,cAC/D,kBAAC,EAAD,CACEf,KAAK,IACLI,KAAK,yCAEP,kBAAC,EAAD,CACEJ,KAAK,WACLI,KAAK,2DAEP,kBAAC,EAAD,CACEJ,KAAK,QACLI,KAAK,2BACLD,SAAS,uB,GAvBaa,aCgBrBC,EAjBA,kBACb,yBAAKf,UAAU,8BACb,kBAAC,EAAD,CACEF,KAAK,IACLI,KAAK,yCAEP,kBAAC,EAAD,CACEJ,KAAK,WACLI,KAAK,2DAEP,kBAAC,EAAD,CACEJ,KAAK,QACLI,KAAK,+B,QCbUc,E,iLAEjB,OACE,2C,GAHgCF,a,QCWvBG,EAXI,SAACrB,GAAD,OACjB,yBAAKI,UAAU,+CACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,uFACd,uBAAGkB,MAAOtB,EAAMuB,WAGpB,2BAAOZ,KAAK,OAAOP,UAAU,mEAAmEoB,YAAaxB,EAAMM,KAAMU,aAAYhB,EAAMM,SCHhImB,EAJA,SAACzB,GAAD,OACb,yBAAK0B,QAAS1B,EAAM2B,SAAUvB,UAAU,wCAAwCwB,KAAK,UAAU5B,EAAM6B,QCClFC,E,iLAEjB,OACE,6BACE,kBAAC,EAAD,CACEP,OAAO,cACPjB,KAAK,sGAEP,kBAAC,EAAD,CACEiB,OAAO,cACPjB,KAAK,yCAEP,kBAAC,EAAD,CACEuB,MAAM,2BACNF,SAAUI,KAAKC,wB,GAdcd,aCAlBe,E,iLAEjB,OACE,6BACE,kBAAC,EAAD,CACEV,OAAO,cACPjB,KAAK,sGAEP,kBAAC,EAAD,CACEiB,OAAO,kBACPjB,KAAK,WAEP,kBAAC,EAAD,CACEiB,OAAO,cACPjB,KAAK,yCAEP,kBAAC,EAAD,CACEiB,OAAO,cACPjB,KAAK,0FAEP,kBAAC,EAAD,CACEuB,MAAM,qEACNF,SAAUI,KAAKC,wB,GAtBiBd,aCArBgB,E,YACnB,WAAalC,GAAQ,IAAD,8BAClB,4CAAMA,KAEDmC,MAAQ,CACXC,eAAe,EACfC,kBAAkB,GAGpB,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKC,uBAAyB,EAAKA,uBAAuBD,KAA5B,gBATZ,E,sFAalBR,KAAKU,SAAS,CAAEJ,kBAAkB,EAAMD,eAAe,M,4CAIvDL,KAAKU,SAAS,CAAEL,eAAe,EAAMC,kBAAkB,M,+BAIvD,IAAIK,EAAkBX,KAAKI,MAAMC,cAAgB,oBAAsB,GACnEO,EAAqBZ,KAAKI,MAAME,iBAAmB,uBAAyB,GAEhF,OACE,6BACE,yBAAKjC,UAAU,gEACb,yBAAKA,UAAU,6CACb,wBAAIsB,QAASK,KAAKO,oBAAqBlC,UAAWsC,GAAlD,6GAEF,yBAAKtC,UAAU,4CACb,wBAAIsB,QAASK,KAAKS,uBAAwBpC,UAAWuC,GAArD,uEAEF,yBAAKvC,UAAU,YACZ2B,KAAKI,MAAMC,cAAgB,kBAAC,EAAD,MAAgB,kBAAC,EAAD,a,GAnClBlB,aCevB0B,E,iLAZX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAO0B,KAAK,QAAQC,UAAWb,S,GALlBhB,aCiBN8B,MAhBf,WACE,OACE,yBAAK5C,UAAU,uBACb,4BAAQA,UAAU,WAChB,kBAAC,EAAD,OAEF,0BAAMA,UAAU,aACd,kBAAC,EAAD,OAEF,4BAAQA,UAAU,OAChB,kBAAC,EAAD,SCJY6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OACgBC,SAASC,eAAe,SDyHtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c3a57a57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c54cc43f.png\";","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Link = (props) => (\r\n  <NavLink to={props.link} activeClassName='active' className={`nav-link ${props.isButton}`}>\r\n    {props.name}\r\n  </NavLink>\r\n)\r\n\r\nexport default Link\r\n","import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Link from './Link'\r\n\r\nexport default class NavBar extends Component {\r\n  render () {\r\n    return (\r\n      <nav className='navbar navbar-expand-lg navbar-light'>\r\n        <div className='container'>\r\n          <NavLink to='/'>\r\n            <img src={require('../../Images/logo.png')} className='logo' alt='Bulls and Cows' />\r\n          </NavLink>\r\n          <button className='navbar-toggler' type='button' data-toggle='collapse' data-target='#navigation' aria-controls='navigation' aria-expanded='false' aria-label='Toggle navigation'>\r\n            <span className='navbar-toggler-icon' />\r\n          </button>\r\n          <div className='collapse navbar-collapse justify-content-end' id='navigation'>\r\n            <Link\r\n              link='/'\r\n              name='Начало'\r\n            />\r\n            <Link\r\n              link='/ranging'\r\n              name='Класиране'\r\n            />\r\n            <Link\r\n              link='/auth'\r\n              name='Влез'\r\n              isButton='primary-btn'\r\n            />\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport Link from './Link'\r\n\r\nconst Footer = () => (\r\n  <div className='footer-navigation col-md-3'>\r\n    <Link\r\n      link='/'\r\n      name='Начало'\r\n    />\r\n    <Link\r\n      link='/ranging'\r\n      name='Класиране'\r\n    />\r\n    <Link\r\n      link='/auth'\r\n      name='Влез'\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Homepage extends Component {\r\n  render () {\r\n    return (\r\n      <p>Homepage</p>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nconst InputField = (props) => (\r\n  <div className='input-group flex-nowrap input-group-lg mt-3'>\r\n    <div className='input-group-prepend'>\r\n      <span className='input-group-text bg-transparent border-top-0 border-left-0 border-right-0 rounded-0'>\r\n        <i class={props.symbol} />\r\n      </span>\r\n    </div>\r\n    <input type='text' className='form-control border-top-0 border-left-0 border-right-0 rounded-0' placeholder={props.name} aria-label={props.name} />\r\n  </div>\r\n)\r\n\r\nexport default InputField\r\n","import React from 'react'\r\n\r\nconst Button = (props) => (\r\n  <div onClick={props.onSubmit} className='btn btn-primary btn-lg mt-3 rounded-0' role='button'>{props.value}</div>\r\n)\r\n\r\nexport default Button\r\n","import React, { Component } from 'react'\r\nimport InputField from './Common/InputField'\r\nimport Button from './Common/Button'\r\n\r\nexport default class LoginForm extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <InputField\r\n          symbol='fas fa-user'\r\n          name='Потребителско име'\r\n        />\r\n        <InputField\r\n          symbol='fas fa-lock'\r\n          name='Парола'\r\n        />\r\n        <Button\r\n          value='Вход'\r\n          onSubmit={this.handleFormSubmit}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport InputField from './Common/InputField'\r\nimport Button from './Common/Button'\r\n\r\nexport default class RegisterForm extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <InputField\r\n          symbol='fas fa-user'\r\n          name='Потребителско име'\r\n        />\r\n        <InputField\r\n          symbol='fas fa-envelope'\r\n          name='E-mail'\r\n        />\r\n        <InputField\r\n          symbol='fas fa-lock'\r\n          name='Парола'\r\n        />\r\n        <InputField\r\n          symbol='fas fa-lock'\r\n          name='Потвърди парола'\r\n        />\r\n        <Button\r\n          value='Регистрация'\r\n          onSubmit={this.handleFormSubmit}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport LoginForm from '../Components/LoginForm'\r\nimport RegisterForm from '../Components/RegisterForm'\r\n\r\nexport default class AuthPage extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      isLoginActive: true,\r\n      isRegisterActive: false\r\n    }\r\n\r\n    this.handleShowLoginForm = this.handleShowLoginForm.bind(this)\r\n    this.handleShowRegisterForm = this.handleShowRegisterForm.bind(this)\r\n  }\r\n\r\n  handleShowRegisterForm () {\r\n    this.setState({ isRegisterActive: true, isLoginActive: false })\r\n  }\r\n\r\n  handleShowLoginForm () {\r\n    this.setState({ isLoginActive: true, isRegisterActive: false })\r\n  }\r\n\r\n  render () {\r\n    var loginFormActive = this.state.isLoginActive ? 'active-login-form' : ''\r\n    var registerFormActive = this.state.isRegisterActive ? 'active-register-form' : ''\r\n\r\n    return (\r\n      <div>\r\n        <div className='row no-margin-offset pt-5 text-center justify-content-center'>\r\n          <div className='col-md-6 col-xs-6 text-right form-heading'>\r\n            <h3 onClick={this.handleShowLoginForm} className={loginFormActive}>Вход за потребители</h3>\r\n          </div>\r\n          <div className='col-md-6 col-xs-6 text-left form-heading'>\r\n            <h3 onClick={this.handleShowRegisterForm} className={registerFormActive}>Регистрация</h3>\r\n          </div>\r\n          <div className='col-md-6'>\r\n            {this.state.isLoginActive ? <LoginForm /> : <RegisterForm />}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport Homepage from '../Views/Homepage'\r\nimport AuthPage from '../Views/AuthPage'\r\n\r\nclass Routes extends Component {\r\n  render () {\r\n    return (\r\n      <Switch>\r\n        <Route exact path='/' component={Homepage} />\r\n        <Route path='/auth' component={AuthPage} />\r\n        {/* <Route path='/live/:date/:game' component={LiveGame} />\r\n\r\n        <Route path='*' component={NotFound} /> */}\r\n      </Switch>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\nimport './App.css'\nimport NavBar from './Components/Common/NavBar'\nimport Footer from './Components/Common/Footer'\nimport Routes from './Configs/Routes'\n\nfunction App () {\n  return (\n    <div className='App container-fluid'>\n      <header className='wrapper'>\n        <NavBar />\n      </header>\n      <main className='container'>\n        <Routes />\n      </main>\n      <footer className='p-3'>\n        <Footer />\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>, document.getElementById('root'))\nserviceWorker.unregister()\n"],"sourceRoot":""}